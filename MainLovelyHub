local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/StupidGabee/LovelyInterface/refs/heads/main/Interface')))()


local Window = OrionLib:MakeWindow({
    Name = "LovelyHub  |  V2.1",
    HidePremium = false,
    IntroEnabled = false,
    SaveConfig = true,
    ConfigFolder = "Lovely"
    
})


local mainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://7733752575",
    PremiumOnly = false
})

local playSection = mainTab:AddSection({
    Name = "Player"
})

local mveSection = mainTab:AddSection({
    Name = "movement"
})


local funTab = Window:MakeTab({
    Name = "fun",
    Icon = "rbxassetid://7743868000",
    PremiumOnly = false
})

 
local camSection = mainTab:AddSection({
    Name = "Camera"
})

local visSection = mainTab:AddSection({
    Name = "ESP"
})

local miscTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://7733765398",
    PremiumOnly = false
})

local mageSection = miscTab:AddSection({
    Name = "Game"
})

local mcuSection = miscTab:AddSection({
    Name = "Visuals"
})

local tpSection = mainTab:AddSection({
    Name = "teleport"
})


local pltargetTab = Window:MakeTab({
    Name = "target",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local contTab = Window:MakeTab({
    Name = "alt control",
    Icon = "rbxassetid://7734053495",
    PremiumOnly = false
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local isLockedOn = false
local targetPlayer = nil
local lockEnabled = false
local smoothingFactor = 0.1
local bodyPartSelected = "Head"
local toggleKey = Enum.KeyCode.Q


local function isR6(character)
    return character:FindFirstChild("Torso") ~= nil and character:FindFirstChild("Left Arm") ~= nil
end


local function getBodyPart(character, part)
    if isR6(character) then
        local r6Parts = {
            Head = "Head",
            LeftUpperArm = "Left Arm",
            RightUpperArm = "Right Arm",
            LeftUpperLeg = "Left Leg",
            RightUpperLeg = "Right Leg",
            UpperTorso = "Torso",
        }
        return r6Parts[part] or "Head"
    else
        return part
    end
end


local function getNearestPlayerToMouse()
    local nearestPlayer = nil
    local shortestDistance = math.huge
    local mousePosition = Mouse.Hit.p

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local headPosition = player.Character.Head.Position
            local distance = (headPosition - mousePosition).Magnitude

            if distance < shortestDistance then
                nearestPlayer = player
                shortestDistance = distance
            end
        end
    end

    return nearestPlayer
end


local function toggleLockOnPlayer()
    if not lockEnabled then return end

    if isLockedOn then
        isLockedOn = false
        targetPlayer = nil
    else
        targetPlayer = getNearestPlayerToMouse()
        if targetPlayer and targetPlayer.Character then
            local part = getBodyPart(targetPlayer.Character, bodyPartSelected)
            if targetPlayer.Character:FindFirstChild(part) then
                isLockedOn = true
            end
        end
    end
end


RunService.RenderStepped:Connect(function()
    if lockEnabled and isLockedOn and targetPlayer and targetPlayer.Character then
        local partName = getBodyPart(targetPlayer.Character, bodyPartSelected)
        local part = targetPlayer.Character:FindFirstChild(partName)

        if part and targetPlayer.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
            local targetPosition = part.Position
            local cameraPosition = Camera.CFrame.Position

            Camera.CFrame = CFrame.new(cameraPosition, targetPosition) * CFrame.new(0, 0, smoothingFactor)
        else
            isLockedOn = false
            targetPlayer = nil
        end
    end
end)

camSection:AddButton({
    Name = "[Q] to AimLock",
    Callback = function()
        lockEnabled = not lockEnabled
        if not lockEnabled then
            isLockedOn = false
            targetPlayer = nil
        end

        camSection:UpdateButton("Enable Lock", {
            Name = lockEnabled and "Disable Lock" or "Enable Lock",
        })
    end
})


camSection:AddDropdown({
    Name = "AimLock on bodyparts",
    Default = "Head",
    Options = {"Head", "UpperTorso", "RightUpperArm", "LeftUpperLeg", "RightUpperLeg", "LeftUpperArm"},
    Callback = function(part)
        bodyPartSelected = part 
    end
})

camSection:AddBind({
    Name = "AimLock keybind",
    Default = Enum.KeyCode.Q,
    Hold = false,
    Callback = function()
        toggleLockOnPlayer()
    end    
})

local teleportEnabled = false
local teleportOffset = 5 


local function toggleTeleport()
    teleportEnabled = not teleportEnabled
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end 
    if input.KeyCode == Enum.KeyCode.E and teleportEnabled then
        local mouse = game.Players.LocalPlayer:GetMouse()
        if mouse.Target then
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(mouse.Hit.x, mouse.Hit.y + teleportOffset, mouse.Hit.z)
        end
    end
end)


playSection:AddButton({
    Name = "[E] to Teleport",
    Callback = function()
        toggleTeleport()
    end
})


local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game.Players.LocalPlayer
local noclipEnabled = false


local function setNoClipState(enabled)
    local character = LocalPlayer.Character
    if character then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide ~= not enabled then
                part.CanCollide = not enabled 
            end
        end
    end
end


local function monitorCharacter()
    while noclipEnabled do
        local character = LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false 
                end
            end
        end
        task.wait(0.2)
    end
end


local function toggleNoClip()
    noclipEnabled = not noclipEnabled
    setNoClipState(noclipEnabled)
    if noclipEnabled then
        task.spawn(monitorCharacter) 
    end
end


LocalPlayer.CharacterAdded:Connect(function()
    if noclipEnabled then
        task.wait(0.5) 
        setNoClipState(noclipEnabled)
        task.spawn(monitorCharacter) 
    end
end)


playSection:AddButton({
    Name = "No Clip",
    Callback = toggleNoClip
})

local function toggleInfiniteJump()
    infiniteJumpEnabled = not infiniteJumpEnabled
    if infiniteJumpEnabled then
    end
end

playSection:AddButton({
    Name = "Infinite Jump",
    Callback = toggleInfiniteJump
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)



local espEnabled = false
local espFolder = Instance.new("Folder", game.CoreGui)
espFolder.Name = "ESPFolder"
local selectedColor = Color3.fromRGB(255, 0, 0)  

local function createESP(player)
    local highlight = Instance.new("Highlight")
    highlight.Adornee = player.Character
    highlight.Parent = espFolder
    highlight.FillTransparency = 1  
    highlight.OutlineColor = selectedColor  
end

local function removeESP(player)
    for _, item in ipairs(espFolder:GetChildren()) do
        if item.Adornee and item.Adornee.Parent == player.Character then
            item:Destroy()
        end
    end
end

local function toggleESP()
    espEnabled = not espEnabled
    if espEnabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                createESP(player)
            end
        end
    else
        for _, item in ipairs(espFolder:GetChildren()) do
            item:Destroy()
        end
    end
end

game.Players.PlayerAdded:Connect(function(player)
    if espEnabled and player ~= game.Players.LocalPlayer then
        createESP(player)
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        removeESP(player)
    end
end)

for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        player.CharacterAdded:Connect(function()
            if espEnabled then
                createESP(player)
            end
        end)
    end
end

visSection:AddButton({
    Name = "highlight",
    Callback = toggleESP
})


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera


local nameESPEnabled = false
local tracerESPEnabled = false


local nameESPObjects = {}
local tracerLines = {}


local function createNameESP(character)
    local head = character:FindFirstChild("Head")
    if not head then return end

    if nameESPObjects[character] then return end

    local billboard = Instance.new("BillboardGui", head)
    billboard.Name = "NameESP"
    billboard.Size = UDim2.new(0, 80, 0, 40) 
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local textLabel = Instance.new("TextLabel", billboard)
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Text = character.Name
    textLabel.TextColor3 = Color3.new(0, 1, 0)
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.Code 
    textLabel.BackgroundTransparency = 1

    nameESPObjects[character] = billboard
end


local function removeNameESP(character)
    if nameESPObjects[character] then
        nameESPObjects[character]:Destroy()
        nameESPObjects[character] = nil
    end
end

local function createTracer(playerCharacter)
    local line = Drawing.new("Line")
    line.Color = Color3.new(1, 1, 1)
    line.Thickness = 1
    line.Transparency = 1
    tracerLines[playerCharacter] = line
end


local function removeTracer(playerCharacter)
    if tracerLines[playerCharacter] then
        tracerLines[playerCharacter]:Remove()
        tracerLines[playerCharacter] = nil
    end
end


local function updateTracers()
    for playerCharacter, line in pairs(tracerLines) do
        if not playerCharacter:FindFirstChild("HumanoidRootPart") then
            line.Visible = false
        else
            local rootPosition = playerCharacter.HumanoidRootPart.Position
            local screenPos, onScreen = camera:WorldToViewportPoint(rootPosition)
            if onScreen then
                local origin = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2) 
                line.From = origin
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Visible = true
            else
                line.Visible = false
            end
        end
    end
end


local function toggleNameESP()
    nameESPEnabled = not nameESPEnabled
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= player then
            local character = v.Character or v.CharacterAdded:Wait()
            if nameESPEnabled then
                createNameESP(character)
            else
                removeNameESP(character)
            end
        end
    end
end

local function toggleTracerESP()
    tracerESPEnabled = not tracerESPEnabled
    if tracerESPEnabled then
        RunService.RenderStepped:Connect(updateTracers)
        for _, v in pairs(Players:GetPlayers()) do
            if v ~= player then
                local character = v.Character or v.CharacterAdded:Wait()
                createTracer(character)
            end
        end
    else
        for _, line in pairs(tracerLines) do
            line:Remove()
        end
        tracerLines = {}
    end
end


Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.CharacterAdded:Connect(function(character)
        if nameESPEnabled then
            createNameESP(character)
        end
        if tracerESPEnabled then
            createTracer(character)
        end
    end)
end)

Players.PlayerRemoving:Connect(function(removingPlayer)
    if removingPlayer.Character then
        removeNameESP(removingPlayer.Character)
        removeTracer(removingPlayer.Character)
    end
end)


visSection:AddButton({
    Name = "name",
    Callback = toggleNameESP
})

visSection:AddButton({
    Name = "tracer",
    Callback = toggleTracerESP
})


local selectedColor = Color3.fromRGB(255, 0, 0) 

local function UpdateESPColor()
    for _, billboard in pairs(nameESPObjects) do
        if billboard and billboard:FindFirstChild("TextLabel") then
            billboard.TextLabel.TextColor3 = selectedColor
        end
    end

    for _, tracer in pairs(tracerLines) do
        if tracer then
            tracer.Color = selectedColor
        end
    end

    if espEnabled then
        for _, item in ipairs(espFolder:GetChildren()) do
            item.OutlineColor = selectedColor
        end
    end
end


visSection:AddColorpicker({
    Name = "ESP Color changer",
    Default = Color3.fromRGB(255, 0, 0),  
    Callback = function(Value)
        selectedColor = Value 
        UpdateESPColor()      
    end
})


local spinning = false
local spinSpeed = 0
local spinConnection = nil

local function startSpinning()
    spinConnection = RunService.RenderStepped:Connect(function()
        if spinning then
            LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
        end
    end)
end



local UsersInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local SPEED_MULTIPLIER = 30
local JUMP_POWER = 60
local JUMP_GAP = 0.3

local character = game.Players.LocalPlayer.Character

local isRolling = false
local ball = character:WaitForChild("HumanoidRootPart")

local function toggleRolling()
    isRolling = not isRolling
    if isRolling then
        local mesh = Instance.new("SpecialMesh")
        mesh.MeshType = Enum.MeshType.Sphere
        mesh.Parent = ball
        ball.Size = Vector3.new(5, 5, 5)
        
        for i, v in ipairs(character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end

        local humanoid = character:WaitForChild("Humanoid")
        local params = RaycastParams.new()
        params.FilterType = Enum.RaycastFilterType.Blacklist
        params.FilterDescendantsInstances = {character}
        
        RunService.RenderStepped:Connect(function(delta)
            if not isRolling then return end
            ball.CanCollide = true
            humanoid.PlatformStand = true
            if UsersInputService:GetFocusedTextBox() then return end

            local rotVel = ball.AssemblyAngularVelocity
            if UsersInputService:IsKeyDown("W") then
                rotVel = rotVel - Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER
            end
            if UsersInputService:IsKeyDown("A") then
                rotVel = rotVel - Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER
            end
            if UsersInputService:IsKeyDown("S") then
                rotVel = rotVel + Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER
            end
            if UsersInputService:IsKeyDown("D") then
                rotVel = rotVel + Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER
            end
            ball.AssemblyAngularVelocity = rotVel
        end)

        UsersInputService.JumpRequest:Connect(function()
            local result = workspace:Raycast(
                ball.Position,
                Vector3.new(
                    0,
                    -((ball.Size.Y/2) + JUMP_GAP),
                    0
                ),
                params
            )
            if result then
                ball.Velocity = ball.Velocity + Vector3.new(0, JUMP_POWER, 0)
            end
        end)

        Camera.CameraSubject = ball
    else
        ball.Shape = Enum.PartType.Block
        ball.Size = Vector3.new(2, 2, 2)
        for i, v in ipairs(character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = true
            end
        end
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
        Camera.CameraSubject = character:FindFirstChildOfClass("Humanoid")
    end
end

funTab:AddButton({
    Name = "Roll",
    Callback = function()
        toggleRolling()
    end
})


local function stopSpinning()
    if spinConnection then
        spinConnection:Disconnect()
        spinConnection = nil
    end
end

local function toggleSpin()
    spinning = not spinning
    if spinning then
        spinSpeed = 400 
        startSpinning()
    else
        stopSpinning()
    end
end

funTab:AddButton({
    Name = "Spin",
    Callback = toggleSpin
})


mcuSection:AddButton({
    Name = "Fog Remover",
    Callback = function()
        fogRemoverActive = not fogRemoverActive
        
        if fogRemoverActive then
           
            local lighting = game:GetService("Lighting")
            lighting.FogStart = math.huge
            lighting.FogEnd = math.huge
            lighting.FogColor = Color3.fromRGB(255, 255, 255)
        else
            
            local lighting = game:GetService("Lighting")
            lighting.FogStart = 0
            lighting.FogEnd = 10000
            lighting.FogColor = Color3.fromRGB(128, 128, 128) 
        end
    end
})


mcuSection:AddButton({
    Name = "Low GFX",
    Callback = function()
        local decalsyeeted = true
        local g = game
        local w = g.Workspace
        local l = g.Lighting
        local t = w.Terrain
        t.WaterWaveSize = 0
        t.WaterWaveSpeed = 0
        t.WaterReflectance = 0
        t.WaterTransparency = 0
        l.GlobalShadows = false
        l.FogEnd = 9e9
        l.Brightness = 0
        settings().Rendering.QualityLevel = "Level01"
        for i,v in pairs(g:GetDescendants()) do
            if v:IsA("Part") or v:IsA("Union") or v:IsA("MeshPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
            elseif v:IsA("Decal") and decalsyeeted then 
                v.Transparency = 1
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then 
                v.Lifetime = NumberRange.new(0)
            end
        end
    end    
})


local originalFOV = workspace.CurrentCamera.FieldOfView 


camSection:AddSlider({
    Name = "FOV",
    Min = 70,  
    Max = 120, 
    Default = game.Workspace.CurrentCamera.FieldOfView, 
    Increment = 1,  
    Callback = function(value)
        game.Workspace.CurrentCamera.FieldOfView = value
    end
})


camSection:AddButton({
    Name = "Reset FOV",
    Callback = function()
        workspace.CurrentCamera.FieldOfView = originalFOV
    end
})


local function toggleLighting()
    if isBright then
        
        game.Lighting.Brightness = originalLighting.Brightness
        game.Lighting.Ambient = originalLighting.Ambient
        game.Lighting.OutdoorAmbient = originalLighting.OutdoorAmbient
        isBright = false
    else
       
        game.Lighting.Brightness = 2
        game.Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        game.Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        isBright = true
    end
end


mcuSection:AddButton({
    Name = "full bright",
  
